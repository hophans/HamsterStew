from autostew_web_enums.models import SessionFlagDefinition, DamageDefinition, TireWearDefinition, FuelUsageDefinition, \
    PenaltyDefinition, AllowedViewsDefinition, WeatherDefinition, GameModeDefinition, SessionState, SessionStage, \
    SessionPhase, PrivacyDefinition, MemberLoadState, PlayerFlagDefinition, MemberState, ParticipantState, EventType
from autostew_web_session.models.models import Track, VehicleClass, Vehicle, Livery

session_setup = [
    {'model_field': 'server_controls_setup', 'api_field': 'ServerControlsSetup', 'push_if': (lambda model: False)},
    {'model_field': 'server_controls_track', 'api_field': 'ServerControlsTrack', 'push_if': (lambda model: False)},
    {'model_field': 'server_controls_vehicle_class', 'api_field': 'ServerControlsVehicleClass', 'push_if': (lambda model: False)},
    {'model_field': 'server_controls_vehicle', 'api_field': 'ServerControlsVehicle', 'push_if': (lambda model: False)},
    {'model_field': 'grid_size', 'api_field': 'GridSize', 'push_if': (lambda model: False)},
    {'model_field': 'max_players', 'api_field': 'MaxPlayers', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'opponent_difficulty', 'api_field': 'OpponentDifficulty', 'push_if': (lambda model: model.server_controls_setup)},

    {'model_field': 'force_identical_vehicles', 'flag': SessionFlagDefinition.force_identical_vehicles, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'allow_custom_vehicle_setup', 'flag': SessionFlagDefinition.allow_custom_vehicle_setup, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'force_realistic_driving_aids', 'flag': SessionFlagDefinition.force_realistic_driving_aids, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'abs_allowed', 'flag': SessionFlagDefinition.abs_allowed, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'sc_allowed', 'flag': SessionFlagDefinition.sc_allowed, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'tcs_allowed', 'flag': SessionFlagDefinition.tcs_allowed, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'force_manual', 'flag': SessionFlagDefinition.force_manual, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'rolling_starts', 'flag': SessionFlagDefinition.rolling_starts, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'force_same_vehicle_class', 'flag': SessionFlagDefinition.force_same_vehicle_class, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'fill_session_with_ai', 'flag': SessionFlagDefinition.fill_session_with_ai, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'mechanical_failures', 'flag': SessionFlagDefinition.mechanical_failures, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'auto_start_engine', 'flag': SessionFlagDefinition.auto_start_engine, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'timed_race', 'flag': SessionFlagDefinition.timed_race, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'ghost_griefers', 'flag': SessionFlagDefinition.ghost_griefers, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'enforced_pitstop', 'flag': SessionFlagDefinition.enforced_pitstop, 'api_field': 'Flags', 'push_if': (lambda model: model.server_controls_setup)},

    {'model_field': 'practice1_length', 'api_field': 'Practice1Length', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'practice2_length', 'api_field': 'Practice2Length', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'qualify_length', 'api_field': 'QualifyLength', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'warmup_length', 'api_field': 'WarmupLength', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'race1_length', 'api_field': 'Race1Length', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'race2_length', 'api_field': 'Race2Length', 'push_if': (lambda model: model.server_controls_setup)},

    {'model_field': 'privacy', 'api_field': 'Privacy', 'enum_model': PrivacyDefinition, 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'damage', 'api_field': 'DamageType', 'enum_model': DamageDefinition, 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'tire_wear', 'api_field': 'TireWearType', 'enum_model': TireWearDefinition, 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'fuel_usage', 'api_field': 'FuelUsageType', 'enum_model': FuelUsageDefinition, 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'penalties', 'api_field': 'PenaltiesType', 'enum_model': PenaltyDefinition, 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'allowed_views', 'api_field': 'AllowedViews', 'enum_model': AllowedViewsDefinition, 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'track', 'api_field': 'TrackId', 'enum_model': Track, 'push_if': (lambda model: model.server_controls_track)},
    {'model_field': 'vehicle_class', 'api_field': 'VehicleClassId', 'enum_model': VehicleClass, 'push_if': (lambda model: model.server_controls_vehicle_class)},
    {'model_field': 'vehicle', 'api_field': 'VehicleModelId', 'enum_model': Vehicle, 'push_if': (lambda model: model.server_controls_vehicle)},

    {'model_field': 'date_year', 'api_field': 'DateYear', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'date_month', 'api_field': 'DateMonth', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'date_day', 'api_field': 'DateDay', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'date_hour', 'api_field': 'DateHour', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'date_minute', 'api_field': 'DateMinute', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'date_progression', 'api_field': 'DateProgression', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'weather_progression', 'api_field': 'ForecastProgression', 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'weather_slots', 'api_field': 'WeatherSlots', 'push_if': (lambda model: model.server_controls_setup)},

    {'model_field': 'weather_1', 'api_field': 'WeatherSlot1', 'enum_model': WeatherDefinition, 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'weather_2', 'api_field': 'WeatherSlot2', 'enum_model': WeatherDefinition, 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'weather_3', 'api_field': 'WeatherSlot3', 'enum_model': WeatherDefinition, 'push_if': (lambda model: model.server_controls_setup)},
    {'model_field': 'weather_4', 'api_field': 'WeatherSlot4', 'enum_model': WeatherDefinition, 'push_if': (lambda model: model.server_controls_setup)},

    {'model_field': 'game_mode', 'api_field': 'GameMode', 'enum_model': GameModeDefinition, 'push_if': (lambda model: model.server_controls_setup)},
]

extra_track_data = [
    {'model_field': 'track_latitude', 'api_field': 'Latitude'},
    {'model_field': 'track_longitude', 'api_field': 'Longitude'},
    {'model_field': 'track_altitude', 'api_field': 'Altitude'},
]

session = [
    {'subsection': 'attributes', 'model_field': 'session_state', 'api_field': 'SessionState', 'enum_model': SessionState},
    {'subsection': 'attributes', 'model_field': 'session_stage', 'api_field': 'SessionStage', 'enum_model': SessionStage},
    {'subsection': 'attributes', 'model_field': 'session_phase', 'api_field': 'SessionPhase', 'enum_model': SessionPhase},
    {'subsection': 'attributes', 'model_field': 'session_time_elapsed', 'api_field': 'SessionTimeElapsed'},
    {'subsection': 'attributes', 'model_field': 'session_time_duration', 'api_field': 'SessionTimeDuration'},
    {'subsection': 'attributes', 'model_field': 'num_participants_valid', 'api_field': 'NumParticipantsValid'},
    {'subsection': 'attributes', 'model_field': 'num_participants_disq', 'api_field': 'NumParticipantsDisqualified'},
    {'subsection': 'attributes', 'model_field': 'num_participants_retired', 'api_field': 'NumParticipantsRetired'},
    {'subsection': 'attributes', 'model_field': 'num_participants_dnf', 'api_field': 'NumParticipantsDNF'},
    {'subsection': 'attributes', 'model_field': 'num_participants_finished', 'api_field': 'NumParticipantsFinished'},
    {'subsection': 'attributes', 'model_field': 'current_year', 'api_field': 'CurrentYear'},
    {'subsection': 'attributes', 'model_field': 'current_month', 'api_field': 'CurrentMonth'},
    {'subsection': 'attributes', 'model_field': 'current_day', 'api_field': 'CurrentDay'},
    {'subsection': 'attributes', 'model_field': 'current_hour', 'api_field': 'CurrentHour'},
    {'subsection': 'attributes', 'model_field': 'current_minute', 'api_field': 'CurrentMinute'},
    {'subsection': 'attributes', 'model_field': 'rain_density_visual', 'api_field': 'RainDensity'},
    {'subsection': 'attributes', 'model_field': 'wetness_path', 'api_field': 'WetnessOnPath'},
    {'subsection': 'attributes', 'model_field': 'wetness_off_path', 'api_field': 'WetnessOffPath'},
    {'subsection': 'attributes', 'model_field': 'wetness_avg', 'api_field': 'WetnessAverage'},
    {'subsection': 'attributes', 'model_field': 'wetness_predicted_max', 'api_field': 'WetnessPredictedMax'},
    {'subsection': 'attributes', 'model_field': 'wetness_max_level', 'api_field': 'WetnessMaxLevel'},
    {'subsection': 'attributes', 'model_field': 'temperature_ambient', 'api_field': 'TemperatureAmbient'},
    {'subsection': 'attributes', 'model_field': 'temperature_track', 'api_field': 'TemperatureTrack'},
    {'subsection': 'attributes', 'model_field': 'air_pressure', 'api_field': 'AirPressure'},
]

member = [
    {'subsection': 'attributes', 'model_field': 'vehicle', 'api_field': 'VehicleId', 'enum_model': Vehicle},
    {'subsection': 'attributes', 'model_field': 'livery', 'api_field': 'LiveryId', 'enum_model': Livery, 'depends_on': 'vehicle'},
    {'subsection': 'attributes', 'model_field': 'ingame_load_state', 'api_field': 'LoadState', 'enum_model': MemberLoadState},

    {'subsection': 'attributes', 'model_field': 'setup_used', 'flag': PlayerFlagDefinition.setup_used, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'controller_gamepad', 'flag': PlayerFlagDefinition.controller_gamepad, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'controller_wheel', 'flag': PlayerFlagDefinition.controller_wheel, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'aid_steering', 'flag': PlayerFlagDefinition.aid_steering, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'aid_braking', 'flag': PlayerFlagDefinition.aid_braking, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'aid_abs', 'flag': PlayerFlagDefinition.aid_abs, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'aid_traction', 'flag': PlayerFlagDefinition.aid_traction, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'aid_stability', 'flag': PlayerFlagDefinition.aid_stability, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'aid_no_damage', 'flag': PlayerFlagDefinition.aid_no_damage, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'aid_auto_gears', 'flag': PlayerFlagDefinition.aid_auto_gears, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'aid_auto_clutch', 'flag': PlayerFlagDefinition.aid_auto_clutch, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'model_normal', 'flag': PlayerFlagDefinition.model_normal, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'model_experienced', 'flag': PlayerFlagDefinition.model_experienced, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'model_pro', 'flag': PlayerFlagDefinition.model_pro, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'model_elite', 'flag': PlayerFlagDefinition.model_elite, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'aid_driving_line', 'flag': PlayerFlagDefinition.aid_driving_line, 'api_field': 'RaceStatFlags'},
    {'subsection': 'attributes', 'model_field': 'valid', 'flag': PlayerFlagDefinition.valid, 'api_field': 'RaceStatFlags'},

    {'subsection': 'attributes', 'model_field': 'ping', 'api_field': 'Ping'},
    {'model_field': 'ingame_index', 'api_field': 'index'},
    {'model_field': 'refid', 'api_field': 'refid'},
    {'model_field': 'steam_id', 'api_field': 'steamid'},
    {'model_field': 'ingame_state', 'api_field': 'state', 'enum_model': MemberState},
    {'model_field': 'name', 'api_field': 'name'},
    {'model_field': 'join_time', 'api_field': 'jointime'},
    {'model_field': 'is_host', 'api_field': 'host'},
]

participant = [
    {'subsection': 'attributes', 'model_field': 'vehicle', 'api_field': 'VehicleId', 'enum_model': Vehicle},
    {'subsection': 'attributes', 'model_field': 'livery', 'api_field': 'LiveryId', 'enum_model': Livery, 'depends_on': 'vehicle'},
    {'subsection': 'attributes', 'model_field': 'current_lap', 'api_field': 'CurrentLap'},
    {'subsection': 'attributes', 'model_field': 'orientation', 'api_field': 'Orientation'},
    {'subsection': 'attributes', 'model_field': 'position_z', 'api_field': 'PositionZ'},
    {'subsection': 'attributes', 'model_field': 'last_lap_time', 'api_field': 'LastLapTime'},
    {'subsection': 'attributes', 'model_field': 'fastest_lap_time', 'api_field': 'FastestLapTime'},
    {'subsection': 'attributes', 'model_field': 'sector3_time', 'api_field': 'Sector3Time'},
    {'subsection': 'attributes', 'model_field': 'refid', 'api_field': 'RefId'},
    {'subsection': 'attributes', 'model_field': 'is_player', 'api_field': 'IsPlayer'},
    {'subsection': 'attributes', 'model_field': 'state', 'api_field': 'State', 'enum_model': ParticipantState},
    {'subsection': 'attributes', 'model_field': 'wipers', 'api_field': 'WipersOn'},
    {'subsection': 'attributes', 'model_field': 'speed', 'api_field': 'Speed'},
    {'subsection': 'attributes', 'model_field': 'rpm', 'api_field': 'RPM'},
    {'subsection': 'attributes', 'model_field': 'position_x', 'api_field': 'PositionX'},
    {'subsection': 'attributes', 'model_field': 'sector2_time', 'api_field': 'Sector2Time'},
    {'subsection': 'attributes', 'model_field': 'name', 'api_field': 'Name'},
    {'subsection': 'attributes', 'model_field': 'position_y', 'api_field': 'PositionY'},
    {'subsection': 'attributes', 'model_field': 'headlights', 'api_field': 'HeadlightsOn'},
    {'subsection': 'attributes', 'model_field': 'grid_position', 'api_field': 'GridPosition'},
    {'subsection': 'attributes', 'model_field': 'current_sector', 'api_field': 'CurrentSector'},
    {'subsection': 'attributes', 'model_field': 'gear', 'api_field': 'Gear'},
    {'subsection': 'attributes', 'model_field': 'race_position', 'api_field': 'RacePosition'},
    {'subsection': 'attributes', 'model_field': 'sector1_time', 'api_field': 'Sector1Time'},
    {'model_field': 'ingame_id', 'api_field': 'id'},
]

event_base = [
    {'model_field': 'type', 'api_field': 'name', 'enum_model': EventType},
    {'model_field': 'ingame_index', 'api_field': 'index'},
]